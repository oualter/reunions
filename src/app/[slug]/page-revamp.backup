import qs from 'qs'
import ImagePlaceHolder from '../components/ImagePlaceHolder'

const CMS_URL = 'http://127.0.0.1:1337'

export interface Review {
  slug: string
  title: string
  date: string
//   image: string
}
// export interface FullReview extends Review {
//   body: string
// }

// const BASE_URL = 'https://mon-cours-next-js-13.vercel.app'

export async function getReviews(): Promise<Review[]> {
  const url =
    `${CMS_URL}/api/place-de-la-reunions?` +
    qs.stringify(
      {
        fields: ['slug', 'title', 'subtitle', 'publishedAt'],
        // populate: { image: { fields: ['url'] } },
        sort: ['publishedAt:desc'],
        // pagination: { pageSize: 6 },
      },
      { encodeValuesOnly: true }
    )
  console.log('getReviews:', url)
  const response = await fetch(url)
  const { data } = await response.json()
  return data.map(({ attributes }) => ({
    slug: attributes.slug,
    title: attributes.title,
    date: attributes.publishedAt.slice(0, 'yyyy-mm-dd'.length),
    image: CMS_URL + attributes.image.data.attributes.url,
  }))
}




const fetchFictions = async () => {
  const fictions = await fetch(`${CMS_URL}/api/place-de-la-reunions/`, {
    method: 'GET',
  })
  return fictions.json()
}
export default async function monthFictions({ params }: any) {
  const goodFictions = await fetchFictions()
  const reallyGoodFictions = goodFictions.data.map(({ element }: any) => {
    return element.attributes
  })

  const getSlugChapters = reallyGoodFictions.filter(({ elt }: any) => {
    const eltWithoutAccents = elt.Mois.normalize('NFD').replace(
      /[\u0300-\u036f]/g,
      ''
    )
    return eltWithoutAccents == params.slug
  })
  //   console.log('getSlugChapters => ', getSlugChapters)
  return (
    <section className="relative w-[864px] mx-auto">
      <ImagePlaceHolder />
      {getSlugChapters.map(({ elt }: any) => {
        const { Jour_du_mois, Mois, Annee, Texte_microfiction, createdAt } = elt
        const randX = Math.round(Math.random() * 864)
        const randY = Math.round(Math.random() * 645)
        return (
          <div
            key={createdAt}
            className="coordXY absolute h-4 w-4 bg-green-500 cursor-pointer"
            style={{ top: `${randY}px`, left: `${randX}px` }}
            data-content=""
          >
            {Annee}
          </div>
        )
      })}
    </section>
  )
}
